% !Rnw root = FRK_Master.Rnw

<<eval=TRUE>>=
library(sp)
library(ggplot2)
library(dplyr)
#library(FRK)
library(spacetime)
 devtools::load_all("~/Wollongong/pkgs/FRK",
                    export_all = TRUE)
opts_FRK$set("progress",FALSE)
opts_FRK$set("parallel",0L)
@



<<eval=TRUE>>=
## Load data
set.seed(1)
N <- 1000
f <- function(x,y,t) (4 -2.1*x^2 + x^4/3)*x^2**sin(t/2.5) + x*y + (4*y^2 - 4)*y^2*sin(t/2.5)

sim_process <- expand.grid(x = seq(0.005,0.995,by=0.01),
                           y = seq(0.005,0.995,by=0.01),
                           t = seq(1,20,by = 1)) %>%
                mutate(proc = f(x,y,t))

sim_data <- data.frame(x = runif(N),
                       y = runif(N),
                       #t = runif(N,min=1,max=20)) %>%   ## This does not work yet, problem with indexing in ST?
                       t = sample(1:20,N,replace=T)) %>%
            mutate(proc = f(x,y,t),
                   z = proc + 0.5*rnorm(N),
                   std = 0.5) %>%
            arrange(t)
time <- as.POSIXct("2015-09-01",tz="") + 3600*24*(sim_data$t-1)

space <- sim_data[,c("x","y")]
coordinates(space) <- ~x+y
STobj <- STIDF(space,time,data=sim_data)
stplot(STobj[,,"z"])
@

<<eval=TRUE>>=
## Prediction (BAU) grid
grid_BAUs <- auto_BAUs(manifold=STplane(),data=STobj,cellsize = c(0.1,0.1,1),type="grid",tunit = "days")
grid_BAUs$fs = 1
@


<<eval=TRUE>>=
scaler <- diag(c(1,1,0.025))
asymm_measure <- new("measure",dist=function(x1,x2)  fields::rdist(x1 %*% scaler,x2 %*% scaler),dim=3L)
TwoD_ST <- STplane()
TwoD_ST@metric <- asymm_measure

xgrid <- seq(0,1,length=4)
ygrid <- seq(0,1,length=4)
tgrid <- seq(0,20,length=3)

basis_locs <- xgrid %>%
    expand.grid(ygrid,tgrid) %>%
    as.matrix()

G <-  radial_basis(manifold = TwoD_ST,
                   loc=basis_locs,
                   scale=rep(0.7,nrow(basis_locs)), # 0.4
                   type="bisquare")

S <- eval_basis(G,as.matrix(sim_process[c("x","y","t")]))
G@manifold@metric <- asymm_measure
@

<<eval=TRUE>>=
f <- z ~ 1
S <- SRE(f,list(STobj),G,
         grid_BAUs,
         est_error = FALSE)
@

<<eval=TRUE>>=
S <- SRE.fit(S,n_EM = 100,tol = 1e-5,print_lik=TRUE)
@

<<eval=TRUE>>=
grid_BAUs <- SRE.predict(S,pred_locs = grid_BAUs,use_centroid = TRUE)
@

<<eval=TRUE>>=
X <- lapply(1:length(time(grid_BAUs)), function(i) {
    SpatialPolygonsDataFrame_to_df(sp_polys = grid_BAUs[,i],
                                    vars = c("mu","var")) %>%
        mutate(t = i)})
X <- do.call("rbind",X)

g1 <- EmptyTheme() +
    geom_polygon(data=X,aes(x,y,fill=mu,group=id)) +
    scale_fill_distiller(palette="Spectral",trans="reverse",limits=c(-2,4.5)) +
    facet_wrap(~t) +   coord_fixed()

g2 <- EmptyTheme() +
    geom_tile(data=sim_process,aes(x,y,fill=proc)) +
    scale_fill_distiller(palette="Spectral",trans="reverse",limits=c(-2,4.5)) +
    facet_wrap(~t) +   coord_fixed()

 g3 <- EmptyTheme() +
    scale_fill_distiller(palette="Spectral",trans="reverse",limits=c(-2,4.5)) +
    geom_point(data=mutate(data.frame(sim_data),t=round(t)),
               aes(x,y,fill=z),
               colour="black",
               pch=21, size=3) +
    facet_wrap(~t) +  coord_fixed()

g4 <- EmptyTheme() +
    geom_polygon(data=X,aes(x,y,fill=sqrt(var),group=id)) +
    scale_fill_distiller(palette="Spectral",trans="reverse") +
    facet_wrap(~t) +   coord_fixed()

g_all <- gridExtra::arrangeGrob(g1,g2,g3,g4,ncol=2)

print(g_all)
@

