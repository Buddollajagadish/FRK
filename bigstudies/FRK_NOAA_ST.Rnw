<<eval=TRUE>>=
library(sp)
library(ggplot2)
library(dplyr)
library(spacetime)
library(gridExtra)
devtools::load_all("~/Wollongong/pkgs/FRK",
                   export_all = FALSE)
opts_FRK$set("progress",FALSE)
opts_FRK$set("parallel",0L)

## Load dataset
load("./data/NOAA_df_1990.Rdata")
Tmax <- subset(NOAA_df_1990,     # subset the data
              proc=="Tmax" &     # only max temperature
              month == 7 &   # May to July
              year == 1993) %>%     # year of 1993
        mutate(time = as.Date(paste(year,month,day,sep="-"))) %>%
        mutate(std = 3) %>%   ## Set measurement error to some value (this needs to be known)
        dplyr::select(z,lon,lat,time,time,id,std)

STObj <- stConstruct(x = Tmax,                  # dataset
                 space = c("lon","lat"),        # spatial fields
                 time="time",                   # time field
                 crs=CRS("+proj=longlat"),      # projection (lon-lat)
                 interval=TRUE)

## Remove projection information
proj4string(STObj) <- ""

## Construct space-time BAUs on the plane
grid_BAUs <- auto_BAUs(manifold=STplane(),    # Planar ST process
                       data=STObj,            # data
                       cellsize = c(1,1,5),   # BAU cell size
                       type="grid",           # grid or hex?
                       convex=-0.1,           # hull construction par.
                       tunit="days")          # time unit

## Plot first three space-time BAUs
stplot(grid_BAUs[,1:2,"t"],main="",layout=c(3,1))

## Set fine-scale variation basis function (e.g., altitude; set to one if unknown)
grid_BAUs$fs = 1                       # fine-scale variation

## Construct spatial basis functions
G_spatial <- auto_basis(m = plane(),               # on R^2
                        data=as(STObj,"Spatial"),  # flatten data
                        nres = 3,                  # 3 resolutions
                        type = "bisquare")         # function

## Construct temporal basis functions
G_temporal <- radial_basis(manifold=real_line(),         # on R^1
                           loc = matrix(seq(2,28,by=4)), # locations
                           scale = rep(3,7))             # scales

## Plot spatial and temporal basis functions
basis_s_plot <- show_basis(G_spatial) + xlab("lon") + ylab("lat")
basis_t_plot <- show_basis(G_temporal) + xlab("t") +
    ylab(expression(phi(t)))
arrangeGrob(basis_s_plot,basis_t_plot + xlab("t"),nrow=1) %>% plot()

## Construct spatio-temporal basis functions
G <- TensorP(G_spatial,G_temporal)         # take the tensor product

## Construct SRE model
breakme

f <- z ~ 1 + lat                 # fixed effects part
S <- SRE(f,
         list(STObj),            # data (can have a list of data)
         G,                      # basis functions
         grid_BAUs,              # BAUs
         est_error = FALSE)      # do not estimate meas.-error var.

## Fit SRE model
S <- SRE.fit(SRE_model = S,    # estimate parameters in the SRE model S
             n_EM = 100,       # maximum no. of EM iterations
             tol = 0.1)        # tolerance on log-likelihood

## Predict field at BAUs
grid_BAUs <- SRE.predict(S,pred_locs = grid_BAUs,use_centroid = TRUE)

## Use stplot to plot predictions at BAUs
grid_BAUs@sp          <- SpatialPoints(grid_BAUs@sp)   # convert to Spatial points object
gridded(grid_BAUs@sp) <- TRUE                          # and assert that it is gridded

stplot(grid_BAUs[,c(1,4,8,12,16,20),"mu"],             # plot the FRK predictor
       main="Predictions (degrees Fahrenheit)",          # title
       layout=c(3,2),                                     # trellis layout
       col.regions=colour_regions,                        # colour scale
       xlim=c(-100,-80),ylim=c(32,46),                    # axes limits
       aspect=1)                                          # fixed aspect ratio
@
