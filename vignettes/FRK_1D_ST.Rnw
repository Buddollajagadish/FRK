\documentclass{article}

%\VignetteEngine{knitr::knitr}
%\VignetteIndexEntry{FRK for prediction of CO2 from AIRS data}

\begin{document}

Introduction

<<eval=TRUE>>=
library(sp)
library(ggplot2)
library(dplyr)
#library(FRK)
devtools::load_all("~/Wollongong/pkgs/FRK",
                   export_all = FALSE)
opts_FRK$set("progress",FALSE)
opts_FRK$set("parallel",0L)
@



<<eval=TRUE>>=
## Load data
set.seed(1)
N <- 50
sim_process <- expand.grid(x = seq(0.005,0.995,by=0.01),
                           y = seq(0,10,by=0.1)) %>%
    mutate(proc = sin(x*10)*cos(y) + 0.3*rnorm(length(x)))

sim_data <- sample_n(sim_process,1000) %>%
    mutate(z = proc + 0.1*rnorm(length(x)), std = 0.1)
coordinates(sim_data) = ~x + y# change into an sp object
@

<<eval=TRUE>>=
## Prediction (BAU) grid
grid_BAUs <- auto_BAUs(manifold=plane(),data=sim_data,cellsize = c(0.01,0.2),type="grid")
grid_BAUs$fs = 1
@


<<eval=TRUE>>=
## Set up SRE model
# G <- auto_basis(m = plane(),data=sim_data,
#                 nres = 2,
#                 regular = 2,
#                 type = "bisquare",
#                 subsamp = 20000)

### OR ###
scaler <- diag(c(1,0.1))
asymm_measure <- new("measure",dist=function(x1,x2)  fields::rdist(x1 %*% scaler,x2 %*% scaler),dim=2L)
OneD_ST <- plane()
OneD_ST@metric <- asymm_measure

xgrid <- seq(0,1,length=5)
ygrid <- seq(0,10,length=5)
basis_locs <- xgrid %>%
    expand.grid(ygrid) %>%
    as.matrix()
G <-  radial_basis(manifold = OneD_ST,
                   loc=basis_locs,
                   scale=rep(0.2,nrow(basis_locs)),
                   type="bisquare")
S <- eval_basis(G,as.matrix(sim_process[c("x","y")]))
sim_process$S <- S[,7]
ggplot(sim_process) + geom_tile(aes(x,y,fill=S)) + coord_fixed()
G@manifold@metric <- asymm_measure
@

<<eval=TRUE>>=
f <- z ~ 1
S <- SRE(f,list(sim_data),G,
         grid_BAUs,
         est_error = FALSE)
@

<<eval=TRUE>>=
S <- SRE.fit(S,n_EM = 50,tol = 1e-5,print_lik=T)
@

<<eval=TRUE>>=
grid_BAUs <- SRE.predict(S,pred_locs = grid_BAUs,use_centroid = T)
@

<<eval=TRUE>>=
X <- SpatialPolygonsDataFrame_to_df(sp_polys = grid_BAUs,
                                    vars = c("mu","var")) %>%
    filter(x < 1.1 & x > -0.1 & y > -0.5 & y < 10.5)

g1 <- EmptyTheme() +
    geom_polygon(data=X,aes(x,y,fill=mu,group=id)) +
    scale_fill_distiller(palette="Spectral",trans="reverse") +
    geom_point(data=data.frame(sim_data),
               aes(x,y,fill=z),
               colour="black",
               pch=21, size=3) +
    xlim(-0.1,1.1) + ylim(-0.4,10.4) +   coord_fixed()
print(g1)
@

Need an end comment

\end{document}
